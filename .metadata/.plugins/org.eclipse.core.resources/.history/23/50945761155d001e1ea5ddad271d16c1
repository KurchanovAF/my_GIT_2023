#include "hist.h"
#include "var.h"



uint16_t maxfreq;   			//максимальная частота в миллисекунду
uint16_t minfreq;   			//минимальная частота в миллисекунду
uint16_t diff[2000]; 			// массив с подсчитанными разницами частот
//const int num_cell = 24;  	// кол-во ячеек гистограммы
uint16_t cell[num_cell]; 		//массив с кол-вом разниц частот в одной ячейке
uint16_t rez_cell[num_cell]; 	//массив с кол-вом разниц частот в одной ячейке для передачи
uint16_t tmp; 					// временные переменные для поиска мин и макс
uint16_t step_diff; 			// шаг ячейки
uint16_t max_diff = 4000;  		// максимум гистограммы
uint16_t* p_diff; 				// указатель на элемент diff[]
int no = 0; 					// номер элемента массива diff[]
int numPosHist = 0;				// Номер позиции в длинном буфере
int num_sec_Hist = 0;   		// номер итерации подсчета ячеек (не более 20)
bool flagHist = false; 			// флаг на формирование cell[]
bool b_buf_HIST = false; 		// флаг на формирование буфера передачи

/*
static inline void Difference(){           // функция поиска  разницы частот в 1 мс

  maxfreq = 0;
  minfreq = 65535;
  for(int i = 0; i < 120; i++){
	  tmp = p_my_DMA2_Data_F1_F2_[i];             // поиск мин и макс частоты
	  if(minfreq > tmp)
	  minfreq = tmp;
	  if(maxfreq < tmp)
	  maxfreq = tmp;
  }

  diff[no] = maxfreq - minfreq;      // С„РѕСЂРјРёСЂСѓРµРј m-СЌР»РµРјРµРЅС‚РѕРІ РјР°СЃСЃРёРІР° СЂР°Р·РЅРёС† С‡Р°СЃС‚РѕС‚
  no++;

  if( no == 1000) flagHist=true;     // РїСЂРё Р·Р°РїРѕР»РЅРµРЅРёРё 1000 СЌР»РµРјРµРЅС‚РѕРІ РЅР°С‡РёРЅР°РµС‚СЃСЏ СЃС‚СЂРѕРµРЅРёРµ РіРёСЃС‚РѕРіСЂР°РјРјС‹ (С„Р»Р°Рі РЅР° РїРѕСЃС‚СЂРѕРµРЅРёРµ = true)
  if( no == 2000)                    // РїСЂРё Р·Р°РїРѕР»РЅРµРЅРёРё 2000 СЌР»РµРјРµРЅС‚РѕРІ С„Р»Р°Рі РЅР° РїРѕСЃС‚СЂРѕРµРЅРёРµ = true, С„РѕСЂРјРёСЂРѕРІР°РЅРёРµ diff[] РЅР°С‡РёРЅР°РµС‚СЃСЏ СЃ РЅР°С‡Р°Р»Р°
  {
	  flagHist = true;
	  no = 0;
  }
}

//*/


void HIST()              // С„СѓРЅРєС†РёСЏ РїРѕСЃС‚СЂРѕРµРЅРёСЏ РіРёСЃС‚РѕРіСЂР°РјРјС‹
{
	if(flagHist) {               // СЂР°Р±РѕС‚Р°РµС‚, РµСЃР»Рё С„Р»Р°Рі  РЅР° РїРѕСЃС‚СЂРѕРµРЅРёРµ = true
		flagHist=false;          // СЃР±СЂР°СЃС‹РІР°РµРј С„Р»Р°Рі РЅР° РїРѕСЃС‚СЂРѕРµРЅРёРµ
		if(no >= 1000)           // РµСЃР»Рё РёРЅРґРµРєСЃ diff[] >=1000, С‚Рѕ РѕР±СЂР°Р±Р°С‚С‹РІР°РµРј Р·РЅР°С‡РµРЅРёСЏ РіРёСЃС‚РѕРіСЂР°РјРјС‹ СЃ РЅСѓР»РµРІРѕРіРѕ СЌР»РµРјРµРЅС‚Р°
		{

			p_diff = &diff[0];
		}
		if(no < 1000)         // РµСЃР»Рё РёРЅРґРµРєСЃ >1000, С‚Рѕ РѕР±СЂР°Р±Р°С‚С‹РІР°РµРј СЃ С‚С‹СЃСЏС‡РЅРѕРіРѕ СЌР»РµРјРµРЅС‚Р°
		{

			p_diff = &diff[1000];
		}

		for(int i; i < 1000; i++)       //С„РѕСЂРјРёСЂСѓРµРј Р·РЅР°С‡РµРЅРёСЏ СЏС‡РµРµРє РіРёСЃС‚РѕРіСЂР°РјРјС‹
		{
			int k;
			k = p_diff[i];
			k = k/step_diff;
			if(k >= num_cell) k = num_cell - 1;
			cell[k]++;
		}
		num_sec_Hist++;        // РѕС‚СЃС‡РёС‚С‹РІР°РµРј РєРѕР»-РІРѕ СЃРµРєСѓРЅРґ
		if(num_sec_Hist == 20)
		{
			for(int i = 0; i < num_cell; i++)  // СЃРѕС…СЂР°РЅСЏРµРј РїРѕР»СѓС‡РµРЅРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ РґР»СЏ РїРµСЂРµРґР°С‡Рё РЅР° РєРѕРјРїСЊСЋС‚РµСЂ
			{
				rez_cell[i] = cell[i];
				cell[i] = 0;
			}
			num_sec_Hist = 0; // СЃР±СЂРѕСЃ РєРѕР»-РІР° СЃРµРєСѓРЅРґ

			b_buf_HIST = true;   // СЃС‚Р°РІРёРј С„Р»Р°Рі РЅР° РїРµСЂРµРґР°С‡Сѓ РґР°РЅРЅС‹С… РЅР° РєРѕРјРїСЊСЋС‚РµСЂ
		}

	}
}



/*

static inline void funWork_HIST(void){     // С„СѓРЅРєС†РёСЏ РїРµСЂРµРґР°С‡Рё РіРёСЃС‚РѕРіСЂР°РјРјС‹ РЅР° РєРѕРјРїСЊСЋС‚РµСЂ
	static uint32_t dataSend[9];
	static int delaySend = 0;
	if(b_buf_HIST){
		delaySend++;
		if (delaySend % 100 == 0){
			dataSend[8] = numPosHist;
			for(int i = 0; i < 8; i++)
			{
				dataSend[i] = rez_cell[numPosHist + i];
			}
			numPosHist += 8;  // РЅРѕРјРµСЂ РїРѕСЂС†РёРё
			SendPkgData(STREAM_DATA, ((uint8_t*)&dataSend), 9*4);

			if(numPosHist >= num_cell) {
				numPosHist = 0; // СЃР±СЂР°СЃС‹РІР°РµРј РЅРѕРјРµСЂ РїРѕСЂС†РёРё
				b_buf_HIST = false; //СЃР±СЂРѕСЃ С„Р»Р°РіР° РЅР° РїРµСЂРµРґР°С‡Сѓ РґР°РЅРЅС‹С… РЅР° РєРѕРјРїСЊСЋС‚РµСЂ
				}
		}
	}
}
//*/
